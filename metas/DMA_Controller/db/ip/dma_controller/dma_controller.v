// dma_controller.v

// Generated using ACDS version 13.1 162 at 2018.08.03.10:45:51

`timescale 1 ps / 1 ps
module dma_controller (
		input  wire        clk_clk,                //         clk.clk
		input  wire        reset_reset_n,          //       reset.reset_n
		input  wire [2:0]  control_dma_address,    // control_dma.address
		input  wire        control_dma_chipselect, //            .chipselect
		output wire [31:0] control_dma_readdata,   //            .readdata
		input  wire        control_dma_write_n,    //            .write_n
		input  wire [31:0] control_dma_writedata   //            .writedata
	);

	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;   // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire  [10:0] mm_interconnect_0_onchip_memory2_0_s1_address;     // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;  // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;       // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;       // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;    // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire         mm_interconnect_0_onchip_memory2_0_s1_debugaccess; // mm_interconnect_0:onchip_memory2_0_s1_debugaccess -> onchip_memory2_0:debugaccess
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;  // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         dma_0_write_master_waitrequest;                    // mm_interconnect_0:dma_0_write_master_waitrequest -> dma_0:write_waitrequest
	wire   [7:0] dma_0_write_master_writedata;                      // dma_0:write_writedata -> mm_interconnect_0:dma_0_write_master_writedata
	wire  [12:0] dma_0_write_master_address;                        // dma_0:write_address -> mm_interconnect_0:dma_0_write_master_address
	wire         dma_0_write_master_chipselect;                     // dma_0:write_chipselect -> mm_interconnect_0:dma_0_write_master_chipselect
	wire         dma_0_write_master_write;                          // dma_0:write_write_n -> mm_interconnect_0:dma_0_write_master_write
	wire         dma_0_read_master_waitrequest;                     // mm_interconnect_0:dma_0_read_master_waitrequest -> dma_0:read_waitrequest
	wire  [12:0] dma_0_read_master_address;                         // dma_0:read_address -> mm_interconnect_0:dma_0_read_master_address
	wire         dma_0_read_master_chipselect;                      // dma_0:read_chipselect -> mm_interconnect_0:dma_0_read_master_chipselect
	wire         dma_0_read_master_read;                            // dma_0:read_read_n -> mm_interconnect_0:dma_0_read_master_read
	wire   [7:0] dma_0_read_master_readdata;                        // mm_interconnect_0:dma_0_read_master_readdata -> dma_0:read_readdata
	wire         dma_0_read_master_readdatavalid;                   // mm_interconnect_0:dma_0_read_master_readdatavalid -> dma_0:read_readdatavalid
	wire         rst_controller_reset_out_reset;                    // rst_controller:reset_out -> [dma_0:system_reset_n, mm_interconnect_0:dma_0_reset_reset_bridge_in_reset_reset, onchip_memory2_0:reset, onchip_memory2_0:reset2]
	wire         rst_controller_reset_out_reset_req;                // rst_controller:reset_req -> [onchip_memory2_0:reset_req, onchip_memory2_0:reset_req2, rst_translator:reset_req_in]

	dma_controller_dma_0 dma_0 (
		.clk                (clk_clk),                         //                clk.clk
		.system_reset_n     (~rst_controller_reset_out_reset), //              reset.reset_n
		.dma_ctl_address    (control_dma_address),             // control_port_slave.address
		.dma_ctl_chipselect (control_dma_chipselect),          //                   .chipselect
		.dma_ctl_readdata   (control_dma_readdata),            //                   .readdata
		.dma_ctl_write_n    (control_dma_write_n),             //                   .write_n
		.dma_ctl_writedata  (control_dma_writedata),           //                   .writedata
		.dma_ctl_irq        (),                                //                irq.irq
		.read_address       (dma_0_read_master_address),       //        read_master.address
		.read_chipselect    (dma_0_read_master_chipselect),    //                   .chipselect
		.read_read_n        (dma_0_read_master_read),          //                   .read_n
		.read_readdata      (dma_0_read_master_readdata),      //                   .readdata
		.read_readdatavalid (dma_0_read_master_readdatavalid), //                   .readdatavalid
		.read_waitrequest   (dma_0_read_master_waitrequest),   //                   .waitrequest
		.write_address      (dma_0_write_master_address),      //       write_master.address
		.write_chipselect   (dma_0_write_master_chipselect),   //                   .chipselect
		.write_waitrequest  (dma_0_write_master_waitrequest),  //                   .waitrequest
		.write_write_n      (dma_0_write_master_write),        //                   .write_n
		.write_writedata    (dma_0_write_master_writedata)     //                   .writedata
	);

	dma_controller_onchip_memory2_0 onchip_memory2_0 (
		.clk         (clk_clk),                                           //   clk1.clk
		.address     (mm_interconnect_0_onchip_memory2_0_s1_address),     //     s1.address
		.debugaccess (mm_interconnect_0_onchip_memory2_0_s1_debugaccess), //       .debugaccess
		.clken       (mm_interconnect_0_onchip_memory2_0_s1_clken),       //       .clken
		.chipselect  (mm_interconnect_0_onchip_memory2_0_s1_chipselect),  //       .chipselect
		.write       (mm_interconnect_0_onchip_memory2_0_s1_write),       //       .write
		.readdata    (mm_interconnect_0_onchip_memory2_0_s1_readdata),    //       .readdata
		.writedata   (mm_interconnect_0_onchip_memory2_0_s1_writedata),   //       .writedata
		.byteenable  (mm_interconnect_0_onchip_memory2_0_s1_byteenable),  //       .byteenable
		.reset       (rst_controller_reset_out_reset),                    // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),                //       .reset_req
		.address2    (),                                                  //     s2.address
		.chipselect2 (),                                                  //       .chipselect
		.clken2      (),                                                  //       .clken
		.write2      (),                                                  //       .write
		.readdata2   (),                                                  //       .readdata
		.writedata2  (),                                                  //       .writedata
		.byteenable2 (),                                                  //       .byteenable
		.clk2        (clk_clk),                                           //   clk2.clk
		.reset2      (rst_controller_reset_out_reset),                    // reset2.reset
		.reset_req2  (rst_controller_reset_out_reset_req)                 //       .reset_req
	);

	dma_controller_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                           (clk_clk),                                           //                         clk_0_clk.clk
		.dma_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                    // dma_0_reset_reset_bridge_in_reset.reset
		.dma_0_read_master_address               (dma_0_read_master_address),                         //                 dma_0_read_master.address
		.dma_0_read_master_waitrequest           (dma_0_read_master_waitrequest),                     //                                  .waitrequest
		.dma_0_read_master_chipselect            (dma_0_read_master_chipselect),                      //                                  .chipselect
		.dma_0_read_master_read                  (~dma_0_read_master_read),                           //                                  .read
		.dma_0_read_master_readdata              (dma_0_read_master_readdata),                        //                                  .readdata
		.dma_0_read_master_readdatavalid         (dma_0_read_master_readdatavalid),                   //                                  .readdatavalid
		.dma_0_write_master_address              (dma_0_write_master_address),                        //                dma_0_write_master.address
		.dma_0_write_master_waitrequest          (dma_0_write_master_waitrequest),                    //                                  .waitrequest
		.dma_0_write_master_chipselect           (dma_0_write_master_chipselect),                     //                                  .chipselect
		.dma_0_write_master_write                (~dma_0_write_master_write),                         //                                  .write
		.dma_0_write_master_writedata            (dma_0_write_master_writedata),                      //                                  .writedata
		.onchip_memory2_0_s1_address             (mm_interconnect_0_onchip_memory2_0_s1_address),     //               onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write               (mm_interconnect_0_onchip_memory2_0_s1_write),       //                                  .write
		.onchip_memory2_0_s1_readdata            (mm_interconnect_0_onchip_memory2_0_s1_readdata),    //                                  .readdata
		.onchip_memory2_0_s1_writedata           (mm_interconnect_0_onchip_memory2_0_s1_writedata),   //                                  .writedata
		.onchip_memory2_0_s1_byteenable          (mm_interconnect_0_onchip_memory2_0_s1_byteenable),  //                                  .byteenable
		.onchip_memory2_0_s1_chipselect          (mm_interconnect_0_onchip_memory2_0_s1_chipselect),  //                                  .chipselect
		.onchip_memory2_0_s1_clken               (mm_interconnect_0_onchip_memory2_0_s1_clken),       //                                  .clken
		.onchip_memory2_0_s1_debugaccess         (mm_interconnect_0_onchip_memory2_0_s1_debugaccess)  //                                  .debugaccess
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
